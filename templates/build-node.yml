# create parameters
parameters:
  folder: ''                                          # folder to install and build
  test: false                                         # whether or not to test
  codeCoverage: false                                 # whether or not to enable code coverage
  pack: false                                         # whether or not to create an NPM package
  version: $(Build.BuildNumber)                       # version number
  createGithubRelease: 'true'                        # whether or not to create a github release

stages:
- stage: 'Github'
  jobs:
  - job: Build
    # defines agent pool and demands (https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example#pool)
    pool:
      vmImage: ubuntu-latest

    steps:
    # setup git
    - script: |
        git config --global user.email "default@dummy.com"
        git config --global user.name "kbrashears5"
      displayName: 'Initialize Git'

    # install npm dependencies
    - task: Npm@1
      displayName: 'Install Dependencies'
      inputs:
        workingDir: '${{ parameters.folder }}'
        command: custom
        customCommand: 'install --silent --prefer-offline --no-audit'

    # update version in package.json
    - task: Npm@1
      displayName: 'Update Version'
      inputs:
        workingDir: '${{ parameters.folder }}'
        command: custom
        customCommand: 'version ${{ parameters.version }} --force'

    # build
    - task: Npm@1
      displayName: 'Build'
      inputs:
        workingDir: '${{ parameters.folder }}'
        command: custom
        customCommand: 'run build'

    # test
    - ${{ if eq(parameters.test, 'true') }}:
      - task: Npm@1
        displayName: 'Test'
        inputs:
          workingDir: '${{ parameters.folder }}'
          command: custom
          customCommand: 'run test'

      # publish test results
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/junit.xml'
          failTaskOnFailedTests: true
          
      # code coverage
      - ${{ if eq(parameters.codeCoverage, 'true') }}:
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage'
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: '**/cobertura-coverage.xml'

    # npm package
    - ${{ if eq(parameters.pack, 'true') }}:
      # delete any previous NPM packages
      - task: DeleteFiles@1
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Delete Previous Packages'
        inputs:
          SourceFolder: '${{ parameters.folder }}'
          Contents: '*.tgz'

      # create a new package
      - task: Npm@1
        displayName: 'Create Package'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          workingDir: '${{ parameters.folder }}'
          command: custom
          customCommand: 'pack'

      # publish package
      - task: Npm@1
        displayName: 'Publish Package'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          command: publish
          workingDir: '${{ parameters.folder }}'
          verbose: false
          publishEndpoint: 'NPM Registry'
      
  - job: Release
    dependsOn: Build
    # defines agent pool and demands (https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example#pool)
    pool:
      vmImage: ubuntu-latest

    steps:
    # create github release
    - ${{ if eq(parameters.createGithubRelease, 'true') }}:
      - template: create-github-release.yml