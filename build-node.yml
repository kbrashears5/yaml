# create parameters
parameters:
  folder: ''                                          # folder to install and build
  build: true                                         # whether or not to build
  test: false                                         # whether or not to test
  codeCoverage: false                          # whether or not to enable code coverage
  pack: false                                         # whether or not to create an NPM package
  version: $(Build.BuildNumber)                       # version number

steps:
# install npm dependencies
- task: Npm@1
  displayName: 'Install Dependencies: ${{ parameters.folder }}'
  inputs:
    workingDir: ${{ parameters.folder }}
    command: custom
    customCommand: 'install --silent --prefer-offline --no-audit'
    customRegistry: useFeed
    customFeed: ${{ parameters.customFeed }}

# update version in package.json
- task: Npm@1
  displayName: 'Update Version: ${{ parameters.folder }}'
  inputs:
    workingDir: ${{ parameters.folder }}
    command: custom
    customCommand: 'version ${{ parameters.version }} --force'
    customRegistry: useFeed
    customFeed: ${{ parameters.customFeed }}

# build
- ${{ if eq(parameters.build, 'true') }}:
  # build folder (npm run build)
  - task: Npm@1
    displayName: 'Run Build: ${{ parameters.folder }}'
    inputs:
      workingDir: ${{ parameters.folder }}
      command: custom
      customCommand: 'run build'
      customRegistry: useFeed
      customFeed: ${{ parameters.customFeed }}

# test
- ${{ if eq(parameters.test, 'true') }}:
  # test folder (npm run test)
  - task: Npm@1
    displayName: 'Run Test: ${{ parameters.folder }}'
    inputs:
      workingDir: ${{ parameters.folder }}
      command: custom
      customCommand: 'run test'
      customRegistry: useFeed
      customFeed: ${{ parameters.customFeed }}

  # publish test results
  - task: PublishTestResults@2
    displayName: 'Publish Test Results: ${{ parameters.folder }}'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/junit.xml'
      failTaskOnFailedTests: true
      
  # code coverage
  - ${{ if eq(parameters.codeCoverage, 'true') }}:
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '**/cobertura-coverage.xml'

# npm package
- ${{ if eq(parameters.pack, 'true') }}:
  # delete any previous NPM packages
  - task: DeleteFiles@1
    displayName: 'Delete Previous Package:  ${{ parameters.folder }}'
    inputs:
      SourceFolder: ${{ parameters.folder }}
      Contents: '*.tgz'

  # create a new package
  - task: Npm@1
    displayName: 'Create Package: ${{ parameters.folder }}'
    inputs:
      workingDir: ${{ parameters.folder }}
      command: custom
      customCommand: 'pack'
      customRegistry: useFeed
      customFeed: ${{ parameters.customFeed }}
